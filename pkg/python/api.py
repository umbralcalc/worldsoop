
# python wrapper for package github.com/worldsoop/worldsoop/pkg/api within overall package api
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -output=python -vm=python3 github.com/worldsoop/worldsoop/pkg/api

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _api
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from api import api
# and then refer to everything using api. prefix
# packages imported by this package listed below:




# ---- Types ---

# Python type for slice []*interactions.AgentConfig
class Slice_Ptr_interactions_AgentConfig(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_api.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_api.IncRef(self.handle)
		else:
			self.handle = _api.Slice_Ptr_interactions_AgentConfig_CTor()
			_api.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_Ptr_interactions_AgentConfig.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_api.DecRef(self.handle)
	def __str__(self):
		s = 'api.Slice_Ptr_interactions_AgentConfig len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'api.Slice_Ptr_interactions_AgentConfig([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _api.Slice_Ptr_interactions_AgentConfig_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _api.Slice_Ptr_interactions_AgentConfig_len(self.handle)
				return Slice_Ptr_interactions_AgentConfig(handle=_api.Slice_Ptr_interactions_AgentConfig_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_interactions_AgentConfig(handle=_api.Slice_Ptr_interactions_AgentConfig_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_api.Slice_Ptr_interactions_AgentConfig_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_Ptr_interactions_AgentConfig.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = go.Ptr_interactions_AgentConfig(handle=_api.Slice_Ptr_interactions_AgentConfig_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_api.Slice_Ptr_interactions_AgentConfig_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []*simulator.OtherParams
class Slice_Ptr_simulator_OtherParams(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_api.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_api.IncRef(self.handle)
		else:
			self.handle = _api.Slice_Ptr_simulator_OtherParams_CTor()
			_api.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_Ptr_simulator_OtherParams.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_api.DecRef(self.handle)
	def __str__(self):
		s = 'api.Slice_Ptr_simulator_OtherParams len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'api.Slice_Ptr_simulator_OtherParams([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _api.Slice_Ptr_simulator_OtherParams_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _api.Slice_Ptr_simulator_OtherParams_len(self.handle)
				return Slice_Ptr_simulator_OtherParams(handle=_api.Slice_Ptr_simulator_OtherParams_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Ptr_simulator_OtherParams(handle=_api.Slice_Ptr_simulator_OtherParams_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_api.Slice_Ptr_simulator_OtherParams_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_Ptr_simulator_OtherParams.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = go.Ptr_simulator_OtherParams(handle=_api.Slice_Ptr_simulator_OtherParams_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_api.Slice_Ptr_simulator_OtherParams_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice [][]float64
class Slice_Slice_float64(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_api.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_api.IncRef(self.handle)
		else:
			self.handle = _api.Slice_Slice_float64_CTor()
			_api.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_Slice_float64.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_api.DecRef(self.handle)
	def __str__(self):
		s = 'api.Slice_Slice_float64 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'api.Slice_Slice_float64([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _api.Slice_Slice_float64_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _api.Slice_Slice_float64_len(self.handle)
				return Slice_Slice_float64(handle=_api.Slice_Slice_float64_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.Slice_float64(handle=_api.Slice_Slice_float64_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_api.Slice_Slice_float64_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_Slice_float64.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = go.Slice_float64(handle=_api.Slice_Slice_float64_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_api.Slice_Slice_float64_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []simulator.Iteration
class Slice_simulator_Iteration(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_api.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_api.IncRef(self.handle)
		else:
			self.handle = _api.Slice_simulator_Iteration_CTor()
			_api.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_simulator_Iteration.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_api.DecRef(self.handle)
	def __str__(self):
		s = 'api.Slice_simulator_Iteration len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'api.Slice_simulator_Iteration([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _api.Slice_simulator_Iteration_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _api.Slice_simulator_Iteration_len(self.handle)
				return Slice_simulator_Iteration(handle=_api.Slice_simulator_Iteration_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.simulator_Iteration(handle=_api.Slice_simulator_Iteration_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_api.Slice_simulator_Iteration_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_simulator_Iteration.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = go.simulator_Iteration(handle=_api.Slice_simulator_Iteration_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_api.Slice_simulator_Iteration_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for map map[string][]bool
class Map_string_Slice_bool(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_api.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_api.IncRef(self.handle)
		else:
			self.handle = _api.Map_string_Slice_bool_CTor()
			_api.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('Map_string_Slice_bool.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_api.Map_string_Slice_bool_set(self.handle, k, v)
	def __del__(self):
		_api.DecRef(self.handle)
	def __str__(self):
		s = 'api.Map_string_Slice_bool len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'api.Map_string_Slice_bool({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _api.Map_string_Slice_bool_len(self.handle)
	def __getitem__(self, key):
		return go.Slice_bool(handle=_api.Map_string_Slice_bool_elem(self.handle, key))
	def __setitem__(self, key, value):
		_api.Map_string_Slice_bool_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _api.Map_string_Slice_bool_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_api.Map_string_Slice_bool_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _api.Map_string_Slice_bool_contains(self.handle, key)

# Python type for map map[string][]float64
class Map_string_Slice_float64(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_api.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_api.IncRef(self.handle)
		else:
			self.handle = _api.Map_string_Slice_float64_CTor()
			_api.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('Map_string_Slice_float64.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_api.Map_string_Slice_float64_set(self.handle, k, v)
	def __del__(self):
		_api.DecRef(self.handle)
	def __str__(self):
		s = 'api.Map_string_Slice_float64 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'api.Map_string_Slice_float64({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _api.Map_string_Slice_float64_len(self.handle)
	def __getitem__(self, key):
		return go.Slice_float64(handle=_api.Map_string_Slice_float64_elem(self.handle, key))
	def __setitem__(self, key, value):
		_api.Map_string_Slice_float64_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _api.Map_string_Slice_float64_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_api.Map_string_Slice_float64_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _api.Map_string_Slice_float64_contains(self.handle, key)

# Python type for map map[string][]int64
class Map_string_Slice_int64(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_api.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_api.IncRef(self.handle)
		else:
			self.handle = _api.Map_string_Slice_int64_CTor()
			_api.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('Map_string_Slice_int64.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_api.Map_string_Slice_int64_set(self.handle, k, v)
	def __del__(self):
		_api.DecRef(self.handle)
	def __str__(self):
		s = 'api.Map_string_Slice_int64 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'api.Map_string_Slice_int64({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _api.Map_string_Slice_int64_len(self.handle)
	def __getitem__(self, key):
		return go.Slice_int64(handle=_api.Map_string_Slice_int64_elem(self.handle, key))
	def __setitem__(self, key, value):
		_api.Map_string_Slice_int64_set(self.handle, key, value.handle)
	def __delitem__(self, key):
		return _api.Map_string_Slice_int64_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_api.Map_string_Slice_int64_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _api.Map_string_Slice_int64_contains(self.handle, key)


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---

# Python type for interface api.StepperOrRunner
class StepperOrRunner(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_api.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_api.IncRef(self.handle)
		else:
			self.handle = 0
	def ReadyToTerminate(self):
		"""ReadyToTerminate() bool"""
		return _api.api_StepperOrRunner_ReadyToTerminate(self.handle)
	def Run(self, goRun=False):
		"""Run() """
		_api.api_StepperOrRunner_Run(self.handle, goRun)
	def Step(self, wg, goRun=False):
		"""Step(object wg) """
		_api.api_StepperOrRunner_Step(self.handle, wg.handle, goRun)


# ---- Structs ---


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def LoadStepperOrRunner(settings, implementations, agents):
	"""LoadStepperOrRunner(object settings, object implementations, []object agents) object"""
	return StepperOrRunner(handle=_api.api_LoadStepperOrRunner(settings.handle, implementations.handle, agents.handle))
def RunSimulator(goRun=False):
	"""RunSimulator() """
	_api.api_RunSimulator(goRun)


